import * as dotenv from "dotenv"
import { Telegraf, Markup } from "telegraf"
import JSONController from "./controller/JSONController.js"
import { CronJob } from "cron"
import _ from "lodash"
import { FLAGS } from "./constants/flags.js"
dotenv.config()

const bot = new Telegraf(process.env.BOT_TOKEN)
const JC = new JSONController()
const cronjob = new CronJob("0 18 * * *", () => {
    console.log("—è –ø–∏–¥–æ—Ä–∞—Å")
    JC.WriteParsedJson()
})
cronjob.start()


try {
    //COMMAND START
    bot.command("start", (ctx) => {
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.message.from.first_name}. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \'–ö—É—Ä—Å –≤–∞–ª—é—Ç\' `, Markup.keyboard([["–ö—É—Ä—Å –≤–∞–ª—é—Ç"]]).resize())
    })
    //COMMAND END

    //HEARS START
    bot.hears("–ö—É—Ä—Å –≤–∞–ª—é—Ç", async (ctx) => {
        await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã üí∂:", Markup.inlineKeyboard(_.chunk(Object.keys(JC.ReadParsedJson()?.[0]?.rates || []).map(e => {
            return Markup.button.callback(e + FLAGS[e], e)
        }), 3)
        ))
    })
    //HEARS END

    //ACTION START
    bot.action(Object.keys(JC.ReadParsedJson()?.[0]?.rates || []), async (ctx) => {
        await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è üíµ", Markup.inlineKeyboard(_.chunk(JC.ReadParsedJson().map(e => {
            return Markup.button.callback(e.base + FLAGS[e.base], e.base + "1" + " " + ctx.update.callback_query.data)
        }), 3)))
    })
    bot.action(new RegExp(`\\b(${JC.ReadParsedJson().map(e => e.base + "1").join("|")})\\b`, "g"), async (ctx) => {
        let base = ctx.update.callback_query.data.replace(/\d/g, "").split(" ")[0]
        let rate = ctx.update.callback_query.data.replace(/\d/g, "").split(" ")[1]
        await ctx.editMessageText(`–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –Ω–∞ ${JC.ReadParsedJson().find(f => f.base = base).date}.\n\n–ö—É—Ä—Å ${rate}${FLAGS[rate] || ""} -> ${base}${FLAGS[base] || ""}: 1 –∫ ${JC.ReadParsedJson().find(f => f.base == base).rates[rate]}\n`)
    })
    //ACTION END

    //LISTENER ON START
    bot.on("text", (ctx) => {
        ctx.sendMessage("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \'–ö—É—Ä—Å –≤–∞–ª—é—Ç\'")
    })
    //LISTENER ON END

    //LAUNCH
    bot.launch().then(console.log("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"));

} catch (err) {
    console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", err)
}
